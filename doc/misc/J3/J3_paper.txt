Title:

"Hidden" Attribute or Statement 

Purpose:

Hiding of data type components outside of its module of definition.

Proposal:

We are a group of geophysicists developing a large and flexible code 
in Fortran 95/2003 that has a complex modular structure.

We are consistently lacking a very simple feature in Fortran that 
would make our code more object-oriented, and the development easier.
In particular, we need the ability to declare all attributes of 
a data type private outside of the derived data type definition.

Typically, we have a group of modules that need access to a particular 
data type. We wish to ensure that no modules outside that group have 
access to those attributes, but rather only refer to the data type 
as a "black box". Two proposed examples follow:

module myvector

type :: vector
   public
   real :: x
   real :: y
end type

end module myvector


module mydriver1 ! Solution #1

use myvector

hidden :: vector

type (vector) :: v

end module mydriver1


module mydriver2 ! Solution #2

use myvector

type (vector), hidden :: v

end module mydriver2

In these examples, the keyword "hidden" would refer to making 
the components v%x and v%y private or inaccessible by any code 
that uses the modules mydriver1 or mydriver2. 
The modules mydriver1 and mydriver2, however, would have access 
to these components of vector v.

Solution #1 would be preferable for our purposes, since we normally 
need to ensure that any new declaration of the data type outside 
of our group of modules has no access to its components.

Currently, we are achieving this aim by declaring the components 
of the data type private, and by including all code that needs 
access to those components in the same module with the aid of the 
"include" statement. This is a hack, which makes our development 
much less elegant than it could be.